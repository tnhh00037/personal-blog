{"version":3,"sources":["Components/Sidebar/index.tsx","App.tsx","Components/Articles/index.tsx","Components/About/index.tsx","Components/Main/index.tsx","serviceWorker.ts","index.tsx"],"names":["Sidebar","className","href","App","Row","Col","sm","path","component","props","articleId","useState","Object","article","setArticle","useEffect","axios","get","then","res","data","title","date","category","content","personalInfomation","setPersonalInformation","personalInfomationFetched","console","log","Fragment","span","offset","name","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0TAGe,SAASA,IAEtB,OACE,yBAAKC,UAAU,sBACb,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,iBAGf,yBAAKA,UAAU,aACb,wBAAIA,UAAU,aACZ,4BAAI,uBAAGC,KAAK,KAAR,SACJ,4BAAI,uBAAGA,KAAK,qBAAR,aACJ,4BAAI,uBAAGA,KAAK,aAAR,UACJ,4BAAI,uBAAGA,KAAK,YAAR,gB,+ECQDC,EAhBX,yBAAKF,UAAU,aACX,kBAACG,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACL,kBAACN,EAAD,OAEJ,kBAACK,EAAA,EAAD,CAAKC,GAAI,GACL,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,YAAYC,UCA7B,SAAiBC,GAAqB,IACzCC,EAAcD,EAAdC,UADwC,EAGlBC,mBAAkBC,QAHA,mBAGzCC,EAHyC,KAGhCC,EAHgC,KAYhD,OAPAC,qBAAU,WACNC,IAAMC,IAAN,yCAA4CP,IAAaQ,MAAK,SAAAC,GAE1DL,EAAWK,EAAIC,WAEpB,IAGC,6BACI,yBAAKnB,UAAU,gBACX,yBAAKA,UAAU,gBACX,4BAAKY,EAAQQ,QAEjB,yBAAKpB,UAAU,gBACX,4BAAKY,EAAQS,OAEjB,yBAAKrB,UAAU,oBACX,4BAAKY,EAAQU,WAEjB,yBAAKtB,UAAU,mBACX,4BAAKY,EAAQW,eDxBb,kBAAC,IAAD,CAAOjB,KAAK,YAAYC,UEG7B,WAAoB,IAAD,EACuBG,mBAEnDC,QAH4B,mBACvBa,EADuB,KACHC,EADG,KAiB9B,OAZAX,qBAAU,WACN,IAAIY,EACJX,IAAMC,IAAN,kCAA4CC,MAAK,SAAAC,GAC7CQ,EAA4BR,EAAIC,KAChCM,EAAuBC,QAE5B,IAEHZ,qBAAU,WACNa,QAAQC,IAAIJ,KACb,CAACA,IAGA,kBAAC,IAAMK,SAAP,KACI,kBAAC1B,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,CAAEyB,KAAM,EAAGC,OAAQ,IACxB,4BAAKP,EAAmBQ,KAAxB,WFvBA,kBAAC,IAAD,CAAO1B,KAAK,QAAQC,UGdzB,WACV,OACK,yBAAKP,UAAU,qBACX,4CCMMiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACKtC,GAELuC,SAASC,eAAe,SD+HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,c","file":"static/js/main.8dc4209a.chunk.js","sourcesContent":["import React from 'react'\nimport './style.css'\n// import selfImg from '../../assets/images/self.png'\nexport default function Sidebar() {\n\n  return (\n    <div className='side-bar full-size'>\n      <div className=\"introduction-div\">\n        <div className=\"personal-img\">\n          {/* <img className=\"personal-img\" src={selfImg} alt=\"\"/> */}\n        </div>\n        <div className=\"headlines\">\n          <ul className=\"headlines\">\n            <li><a href=\"/\">Home</a></li>\n            <li><a href=\"/article-category\">Category</a></li>\n            <li><a href=\"/about-me\">About</a></li>\n            <li><a href=\"/contact\">Contact</a></li>\n\n          </ul>\n        </div>\n\n      </div>\n    </div>\n  )\n}\n","import \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport React, { useState } from \"react\";\nimport \"./App.css\";\nimport { Sidebar, Header, Footer, Main, Article, AboutMe } from \"./Components\";\nimport { Row, Col } from \"react-bootstrap\";\nimport { Route, Link, BrowserRouter as Router } from \"react-router-dom\";\n\nconst App = (\n    <div className=\"full-size\">\n        <Row>\n            <Col sm={3}>\n                <Sidebar />\n            </Col>\n            <Col sm={9}>\n                <Router>\n                    <Route path=\"/articles\" component={Article} />\n                    <Route path=\"/about-me\" component={AboutMe} />\n                    <Route path=\"/home\" component={Main} />\n                </Router>\n            </Col>\n        </Row>\n    </div>\n);\n\nexport default App;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"./style.css\";\n\nexport interface Article {\n    title: string;\n    date: string;\n    content: any;\n    category: string;\n}\n\nexport interface ArticleProp {\n    articleId: string;\n    date?: string;\n}\nexport default function Article(props: ArticleProp) {\n    const { articleId } = props;\n\n    const [article, setArticle] = useState<Article>(Object);\n\n    useEffect(() => {\n        axios.get(`http://localhost:3030/articles/${articleId}`).then(res => {\n            // TODO: handle request no article\n            setArticle(res.data);\n        });\n    }, []);\n\n    return (\n        <div>\n            <div className=\"article-info\">\n                <div className=\"article-name\">\n                    <h2>{article.title}</h2>\n                </div>\n                <div className=\"article-date\">\n                    <h2>{article.date}</h2>\n                </div>\n                <div className=\"article-category\">\n                    <h2>{article.category}</h2>\n                </div>\n                <div className=\"article-content\">\n                    <h2>{article.content}</h2>\n                </div>\n            </div>\n        </div>\n    );\n}\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { Row, Col } from \"react-bootstrap\";\nimport styled from \"styled-components\";\n\ninterface PersonalInformation {\n    name: string;\n    job: string;\n    hobby: string;\n    passion: string;\n}\n\n{\n    /*const StyledCol  = styled(Col)`\n    display:flex;\n    flex-direction: column;\n    justify-content: center;\n`*/\n}\nexport default function AboutMe() {\n    const [personalInfomation, setPersonalInformation] = useState<\n        PersonalInformation\n    >(Object);\n\n    useEffect(() => {\n        let personalInfomationFetched: PersonalInformation;\n        axios.get(`http://localhost:3030/about-me`).then(res => {\n            personalInfomationFetched = res.data;\n            setPersonalInformation(personalInfomationFetched);\n        });\n    }, []);\n\n    useEffect(() => {\n        console.log(personalInfomation);\n    }, [personalInfomation]);\n\n    return (\n        <React.Fragment>\n            <Row>\n                <Col sm={{ span: 8, offset: 2 }}>\n                    <h1>{personalInfomation.name} </h1>\n                </Col>\n            </Row>\n        </React.Fragment>\n    );\n}\n","import React from 'react'\nimport './style.css'\n\nexport default function MainBody() {\n     return (\n          <div className=\"container content\">\n              <h1>\n                  HOME\n              </h1>\n          </div>\n     )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Route, Link, BrowserRouter as Router } from 'react-router-dom'\n\n\nReactDOM.render(\n  <React.StrictMode>\n      {App}\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}